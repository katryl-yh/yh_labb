-- Pass Rate (Percentage of Students with a Grade of 'G' or 'VG')

SELECT 
    c.class_id,
    c.class_name,
    ROUND(
        (COUNT(CASE WHEN e.grade IN ('G', 'VG') THEN 1 END) * 100.0) / COUNT(e.student_id), 1
    ) AS pass_rate_percentage
FROM yrkesco.Class c
JOIN yrkesco.Course_offering co ON co.linked_class_id = c.class_id
JOIN yrkesco.Enrollment e ON co.offering_id = e.offering_id
GROUP BY c.class_id, c.class_name
ORDER BY pass_rate_percentage DESC;

-- Number of students who failed in a class,
-- which can help track students in need of intervention

WITH ig_counts AS (
    -- Count the number of 'IG' grades per student in each class
    SELECT 
        e.student_id,
        c.class_id,
        COUNT(CASE WHEN e.grade = 'IG' THEN 1 END) AS ig_count
    FROM yrkesco.Enrollment e
    JOIN yrkesco.Course_offering co ON e.offering_id = co.offering_id
    JOIN yrkesco.Class c ON co.linked_class_id = c.class_id
    WHERE e.grade = 'IG'  -- Only count 'IG' grades
    GROUP BY e.student_id, c.class_id
)
-- Now, count how many students have 1, 2, 3, or 4+ IGs in each class
SELECT 
    c.class_id,
    c.class_name,
    -- Count students with exactly 1 'IG'
    COUNT(CASE WHEN ic.ig_count = 1 THEN 1 END) AS students_with_1_ig,
    -- Count students with exactly 2 'IG'
    COUNT(CASE WHEN ic.ig_count = 2 THEN 1 END) AS students_with_2_igs,
    -- Count students with exactly 3 'IG'
    COUNT(CASE WHEN ic.ig_count = 3 THEN 1 END) AS students_with_3_igs,
    -- Count students with 4 or more 'IG' grades
    COUNT(CASE WHEN ic.ig_count >= 4 THEN 1 END) AS students_with_4_or_more_igs
FROM ig_counts ic
JOIN yrkesco.Class c ON ic.class_id = c.class_id
GROUP BY c.class_id, c.class_name
ORDER BY c.class_id;

-- Number of students that have passed all the courses in the class
-- so far

SELECT 
    s.class_id,
    s.class_name,
    COUNT(DISTINCT CASE WHEN s.failed_courses_count = 0 THEN s.student_id END) AS students_passed_all_courses
FROM (
    SELECT 
        c.class_id,
        c.class_name,
        e.student_id,
        COUNT(CASE WHEN e.grade = 'IG' THEN 1 END) AS failed_courses_count
    FROM yrkesco.Enrollment e
    JOIN yrkesco.Course_offering co ON e.offering_id = co.offering_id
    JOIN yrkesco.Class c ON co.linked_class_id = c.class_id
    WHERE e.grade != 'NOT SET'  -- Consider only students with a grade
    GROUP BY c.class_id, c.class_name, e.student_id
) AS s
GROUP BY s.class_id, s.class_name
ORDER BY s.class_id;

-- Average grade in each class, which gives an overview of the overall performance.

SELECT 
    c.class_id,
    c.class_name,
    ROUND(
        AVG(
            CASE 
                WHEN e.grade = 'IG' THEN 0
                WHEN e.grade = 'G' THEN 1
                WHEN e.grade = 'VG' THEN 2
                ELSE NULL
            END
        ), 1
    ) AS avg_grade
FROM yrkesco.Class c
JOIN yrkesco.Course_offering co ON co.linked_class_id = c.class_id
JOIN yrkesco.Enrollment e ON co.offering_id = e.offering_id
GROUP BY c.class_id, c.class_name
ORDER BY avg_grade DESC;


-- Percentage of students 
-- who have completed (passed) a particular course.

SELECT 
    c.class_id,
    c.class_name,
    cr.course_name,
    COUNT(DISTINCT CASE WHEN e.grade IN ('G', 'VG') THEN e.student_id END) AS students_passed,
    COUNT(DISTINCT e.student_id) AS total_students_in_class,
    ROUND(
        (COUNT(DISTINCT CASE WHEN e.grade IN ('G', 'VG') THEN e.student_id END) * 100.0) 
        / COUNT(DISTINCT e.student_id), 1
    ) AS pass_rate_percentage
FROM yrkesco.Enrollment e
JOIN yrkesco.Course_offering co ON e.offering_id = co.offering_id
JOIN yrkesco.Course cr ON co.course_id = cr.course_id
JOIN yrkesco.Class c ON co.linked_class_id = c.class_id
WHERE e.grade != 'NOT SET'  -- Exclude rows where the grade is 'NOT SET'
GROUP BY c.class_id, c.class_name, cr.course_name
ORDER BY c.class_id, cr.course_name;

-- Pass Rate Percentage for Each Teacherâ€™s Courses

SELECT 
    c.class_id,
    c.class_name,
    cr.course_name,
    t.first_name AS teacher_first_name,
    t.last_name AS teacher_last_name,
    COUNT(DISTINCT CASE WHEN e.grade IN ('G', 'VG') THEN e.student_id END) AS students_passed,
    COUNT(DISTINCT e.student_id) AS total_students_in_class,
    ROUND(
        (COUNT(DISTINCT CASE WHEN e.grade IN ('G', 'VG') THEN e.student_id END) * 100.0) 
        / COUNT(DISTINCT e.student_id), 1
    ) AS pass_rate_percentage
FROM yrkesco.Enrollment e
JOIN yrkesco.Course_offering co ON e.offering_id = co.offering_id
JOIN yrkesco.Course cr ON co.course_id = cr.course_id
JOIN yrkesco.Class c ON co.linked_class_id = c.class_id
JOIN yrkesco.Person t ON co.teacher_id = t.person_id -- Join with Person table to get teacher's name
WHERE e.grade != 'NOT SET'  -- Exclude rows where the grade is 'NOT SET'
AND co.teacher_id = 1  -- Replace 123 with the actual teacher ID you want to filter by
GROUP BY c.class_id, c.class_name, cr.course_name, t.first_name, t.last_name
ORDER BY c.class_id, cr.course_name;

/* Compare teachers and calculate an average of their average passing rates
 across all their courses in two steps:
- 1: calculate the pass rate for each course taught by each teacher.
- 2: calculate the average of these individual course pass rates per teacher.*/

WITH teacher_course_pass_rate AS (
    SELECT 
        co.teacher_id,
        p.first_name AS teacher_first_name,
        p.last_name AS teacher_last_name,
        c.class_id,
        c.class_name,
        cr.course_name,
        COUNT(DISTINCT CASE WHEN e.grade IN ('G', 'VG') THEN e.student_id END) AS students_passed,
        COUNT(DISTINCT e.student_id) AS total_students_in_class,
        ROUND(
            (COUNT(DISTINCT CASE WHEN e.grade IN ('G', 'VG') THEN e.student_id END) * 100.0) 
            / COUNT(DISTINCT e.student_id), 1
        ) AS pass_rate_percentage
    FROM yrkesco.Enrollment e
    JOIN yrkesco.Course_offering co ON e.offering_id = co.offering_id
    JOIN yrkesco.Course cr ON co.course_id = cr.course_id
    JOIN yrkesco.Class c ON co.linked_class_id = c.class_id
    JOIN yrkesco.Person p ON co.teacher_id = p.person_id  -- Join with Person table to get teacher's name
    WHERE e.grade != 'NOT SET'  -- Exclude rows where the grade is 'NOT SET'
    GROUP BY co.teacher_id, p.first_name, p.last_name, c.class_id, c.class_name, cr.course_name
)
SELECT 
    teacher_id,
    teacher_first_name,
    teacher_last_name,
    ROUND(AVG(pass_rate_percentage), 1) AS average_pass_rate
FROM teacher_course_pass_rate
GROUP BY teacher_id, teacher_first_name, teacher_last_name
ORDER BY average_pass_rate DESC;





